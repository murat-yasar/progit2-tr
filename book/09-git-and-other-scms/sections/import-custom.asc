[[_custom_importer]]
==== Farklı Bir İçe-Aktarıcı

(((git commands, fast-import)))
(((Importing, from others)))
Eğer sisteminiz yukarıdakilerden biri değilse, çevrimiçi bir içe aktarıcı aramalısınız. 
Bir çok farklı sistem için CVS, Clear Case, Visual Source Safe ve hatta dizinler için bir arşiv de içeren kaliteli aktarıcılar mevcuttur.
Eğer bu araçlardan hiçbiri sizin için uygun değilse, daha az bilinen bir araç kullanıyorsanız veya bir şekilde daha özel bir içe aktarma işlemine ihtiyacınız varsa, `git fast-import` 'u kullanmalısınız.
Bu komut belirli Git verilerini yazmak için stdin'den basit talimatlar okur.
Bu şekilde Git nesneleri oluşturmak, ham Git komutlarını çalıştırmaktan veya ham nesneleri yazmaya çalışmaktan çok daha kolaydır (daha fazla bilgi için <<ch10-git-internals#ch10-git-internals>> bölümüne bakın).
Bu şekilde, içe aktardığınız sistemden gerekli bilgileri okuyup, stdout'a basit talimatlar yazdıracak bir içe aktarma betiği oluşturabilirsiniz.
Ardından, bu programı çalıştırabilir ve çıktısını `git fast-import` üzerinden akıtarak içe aktarabilirsiniz.

Size hızlı bir şekilde öğretmek için, basit bir içe aktarıcı yazdıracağız.
Şimdi, mevcut bir dizinde çalıştığınızı varsayalım. Projenizi zaman zaman dizini zaman damgasıyla işaretlenmiş bir `back_YYYY_MM_DD` yedek dizinine kopyalayarak yedekliyorsunuz ve bunu Git'e içe aktarmak istiyorsunuz.
Dizin yapınız şöyle görünüyor:

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

Git dizinini içe aktarmak için, Git'in verilerini nasıl depoladığını gözden geçirmeniz gerekir.
Hatırlayacağınız üzere, Git temel olarak, içeriğin pozlarına işaret eden katkı nesnelerinin bir listesinden oluşur.
Yapmanız gereken tek şey, `fast-import` ile içerik pozlarının ne olduğunu, onlara işaret eden katkı verilerini ve bunların sıralanma düzenini söylemektir.
Stratejiniz pozları tek tek geçerken, her dizinin içeriğini bir önceki katkıyla ilişkilendirekek yeni bir katkı oluşturmaktır.

<<ch08-customizing-git#_an_example_git_enforced_policy>> bölümünde yaptığımız gibi, genellikle bununla çalıştığımız ve okuması kolay alduğu için kodumuzu Ruby'de yazacağız.
Siz aşina olduğunuz herhangi bir dilde de bunu yazabilirsiniz (yalnızca uygun bilgilerin `stdout` 'a yazdırılması gerekmektedir).
Ve eğer Windows'ta çalışıyorsanız, sadece satır sonuna taşıma dönüşlerini (CRLF) koymamaya, özel bir dikkat göstermeniz gerekecektir. 
'git fast-import' Windows'un kullandığı satır başı satır beslemelerini (CRLF) değil, yalnızca satır beslemelerini (LF) isteme konusunda çok hassasdır.

Başlamak için, hedef dizine gidip, her birinin bir katkı olarak içe aktarılmasını istediğiniz her alt dizini tanımlayacaksınız.
Her alt dizine geçip, onu dışa aktarmak için gerekli komutları yazdırırsınız.
Temel ana döngünüz şöyle görünecektir:

[source,ruby]
----
last_mark = nil

# loop through the directories
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # move into the target directory
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

Her dizin içinde `print_export` 'u çalıştırırsınız: bu önceki anlık görüntünün bildirimini ve işaretini alırarak sıradakinin bildirim ve işaretini döndürür. 
Bu şekilde, onları uygun şekilde bağlayabilirsiniz.
`Mark` katkıya verdiğiniz bir "hızlı-içe-aktarma" tanımıdır: katkı oluşturduğunuzda, her birine başka katkılardan bağlantı kurmak için kullanabileceğiniz bir işaret verirsiniz.
Dolayısıyla, `print_export` yönteminizde yapmanız gereken ilk şey, dizin adından bir işaret oluşturmaktır:

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

İşaretin bir tamsayı olması gerektiği için, bunu bir dizin serisi oluşturarak ve işaret olarak indeks değerini kullanarak yapacaksınız.
Yönteminiz şuna benzer:

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

Şimdi katkınız bir tam sayı temsilini aldığına göre, katkı meta verileri için bir tarih gerekmektedir.
Tarih dizinin adında ifade edildiğinden, bunu dışarı çıkarmanız gerekecektir.
`print_export` dosyanızdaki bir sonraki satır şu şekildedir:

[source,ruby]
----
date = convert_dir_to_date(dir)
----

burada `convert_dir_to_date` şu şekilde tanımlanır:

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

Bu her dizinin tarihi için bir tamsayı değeri döndürür.
Her katkı için ihtiyacınız olan son meta bilgi parçası, global bir değişkene kodladığınız katkı verileridir:

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

Artık aktarıcınız için katkı verilerini yazdırmaya başlamaya hazırsınız.
İlk bilgiler, bir katkı nesnesini tanımladığınızı ve bunun hangi dalda olduğunu; ardından, oluşturduğunuz işareti, katkılayanın bilgilerini ve katkı mesajını; ve onun ardından da -varsa- önceki katkıyı belirtir.
Kodunuz şuna benzer:

[source,ruby]
----
# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

Yapması kolay olduğu için saat dilimini (-0700) kodlayın.
Başka bir sistemden içe aktarıyorsanız saat dilimini fark olarak belirtmeniz gerekir.
Katkı mesajı özel bir formatta ifade edilmelidir:

[source]
----
data (size)\n(contents)
----

Format: kelime verileri, okunacak verinin boyutu, yeni satır ve son olarak verilerden oluşur.
Daha sonra dosya içeriğini belirtmek için aynı biçimi kullanmanız gerektiğinden, `export_data` adında bir yardımcı yöntem oluşturursunuz:

[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

Geriye kalan tek şey, her poz için dosya içeriğini belirtmektir.
Bunların hepsi tek bir dizinde bulunduğu için bu da kolaydır; `deleteall` komutunu ve ardından dizindeki her dosyanın içeriğini yazdırabilirsiniz.
Git daha sonra her pozu uygun şekilde kaydedecektir:

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

Not: Birçok sistem, revizyonlarını bir katkıdan diğerine yapılan değişiklikler olarak düşündüğünden, hızlı içe aktarma, her bir katkıda hangi dosyaların eklendiğini, kaldırıldığını veya değiştirildiğini; ve yeni içeriklerin neler olduğunu belirtmek için komutlar alabilir.
Pozlar arasındaki farkları hesaplayabilir ve yalnızca bu verileri sağlayabilirsiniz, ancak bunu yapmak daha karmaşıktır: Git'e tüm verileri verip, onun çözmesine izin verebilirsiniz.
Eğer bu verileriniz için daha uygunsa, verilerinizi bu şekilde nasıl sağlayacağınıza ilişkin ayrıntılar için 'hızlı içe aktarma' kılavuz sayfasına bakın.

Yeni dosya içeriklerini listeleme veya yeni içeriklerle değiştirilmiş bir dosyayı belirtme formatı aşağıdaki gibidir:

[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

Burada mod 644'tür (yürütülebilir dosyalarınız varsa, bunun yerine 755'i tespit edip belirtmeniz gerekir) ve satır içinde bu satırın hemen ardından içerikleri listeleyeceğiniz yazmaktadır.
'inline_data' yönteminiz şuna benzer:

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

Katkı mesajı verilerinizi belirttiğiniz yöntemle aynı olduğu için daha önce tanımladığınız `export_data` yöntemini yeniden kullanırsınız.

Yapmanız gereken son şey, bir sonraki yinelemeye aktarılabilmesi için mevcut işareti döndürmektir:

[source,ruby]
----
return mark
----

[NOTE]
====
Windows üzerinde çalışıyorsanız fazladan bir adım eklediğinizden emin olmanız gerekir.
Daha önce de belirtildiği gibi, Windows yeni satır karakterleri için CRLF'yi kullanırken `git fast-import` yalnızca LF'yi bekler.
Bu sorunu aşmak ve `git fast-import` 'u mutlu etmek için Ruby'ye CRLF yerine LF kullanmasını söylemeniz gerekir:

[source,ruby]
----
$stdout.binmode
----
====

Bu kadar.
İşte senaryonun tamamı:

[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end

def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end

# Loop through the directories
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # move into the target directory
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

Bu betiği çalıştırırsanız şuna benzer bir içerik elde edersiniz:

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

Aktarıcıyı çalıştırmak için, içe aktarmak istediğiniz Git dizinindeyken bu çıktıyı `git fast-import` aracılığıyla aktarın.
Yeni bir dizin oluşturabilir ve ardından başlangıç ​​noktası olarak bu dizin içinde `git init` 'i çalıştırabilir ve ardından betiğinizi çalıştırabilirsiniz:

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

Gördüğünüz gibi, başarıyla tamamlandığında, size neleri başardığına dair bir sürü istatistik veriyor.
Burada, 1 dalda 4 katkı için toplam 13 nesneyi içe aktardınız.
Artık yeni geçmişinizi görmek için `git log` 'u çalıştırabilirsiniz:

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

İşte güzel ve temiz bir Git reposu.
Hiçbir şeyin henüz alınmadığını farketmeniz önemlidir (başlangıçta çalışma dizininizde herhangi bir dosya yoktur).
Bunları almak için dalınızı, şu anda `master` 'ın olduğu yere sıfırlamanız gerekmektedir:

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

`fast-import` aracıyla çok daha fazlasını yapabilirsiniz; farklı modları, ikili verileri, birden fazla dallanmayı ve birleştirmeyi, etiketleri, ilerleme göstergelerini ve daha fazlasını yönetebilirsiniz.
Git kaynak kodunun `contrib/fast-import` dizininde daha karmaşık senaryoların bir dizi örneği mevcuttur.
