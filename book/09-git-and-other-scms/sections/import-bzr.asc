==== Bazaar
(((Bazaar)))(((Importing, from Bazaar)))

Bazaar, Git gibi bir Dağıtık Sürüm Kontrol Sistemi (DVCS) aracıdır ve sonuç olarak bir Bazaar reposunu bir Git reposuna dönüştürmek oldukça basittir. 
Bunun için `bzr-fastimport` eklentisini içe aktarmanız gerekecek.

===== bzr-fastimport Eklentisini Edinme

UNIX benzeri işletim sistemlerinde hızlı içe aktarma eklentisini kurmanın yolu ve Windows'tan farklıdır. 
UNIX'te en kolayı gerekli tüm bağımlılıkları kuracak olan `bzr-fastimport` paketini kurmaktır.

Örneğin, Debian ve türevlerinde şunları yapabilirsiniz:

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

RHEL ile şunları yapabilirsiniz:

[source,console]
----
$ sudo yum install bzr-fastimport
----

Fedora ile sürüm 22'den beri paket yöneticisi dnf'tir:

[source,console]
----
$ sudo dnf install bzr-fastimport
----

Paket mevcut değilse, onu eklenti olarak yükleyebilirsiniz:

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins     # creates the necessary folders for the plugins
$ cd ~/.bazaar/plugins
$ bzr branch lp:bzr-fastimport fastimport   # imports the fastimport plugin
$ cd fastimport
$ sudo python setup.py install --record=files.txt   # installs the plugin
----

Bu eklentinin çalışması için ayrıca `fastimport` Python modülüne de ihtiyacınız olacaktır.
Onun mevcut olup olmadığını kontrol edebilir ve aşağıdaki komutlarla yükleyebilirsiniz:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----
Eğer mevcut değilse, onu https://pypi.python.org/pypi/fastimport/ adresinden indirebilirsiniz.

Windows'ta `bzr-fastimport` standalone (bağımsız) sürümüyle ve varsayılan kurulumla (tüm onay kutularını işaretleyerek) otomatik olarak kuruludır. 
Bu durumda yapmanız gereken bir şey yoktur.

Bu noktada, bir Bazaar reposunu içe aktarma yöntemi, tek bir dalınızın olup olmadığına veya birçok dala sahip bir repoyla çalışıp çalışmadığınıza göre farklılık gösterir.

===== Tek Dallı Proje

Şimdi, Bazaar reposunu içeren dizine gidin ve Git reposunu başlatın:

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

Şimdi, Bazaar reposunu dışa aktarabilir ve aşağıdaki komutu kullanarak bir Git reposuna dönüştürebilirsiniz:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Proje boyutuna bağlı olarak, Git reposunun oluşturulması birkaç saniye ile birkaç dakika arasında sürebilir.

===== Bir Anadal ve Bir Çalışma Dalı Olan Proje Durumu

Dallara sahip bir Bazaar reposunu da içe aktarabilirsiniz. 
Diyelim ki iki dalınız var: biri ana dalı temsil eder (myProject.trunk), diğeri ise çalışma dalıdır (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Git reposunu oluşturun ve dizinine gidin:

[source,console]
----
$ git init git-repo
$ cd git-repo
----

Master dalını Git'e çekin:

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Çalışma dalını Git'e çekin:

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Şimdi `git branch` komutu hem `master` dalını, hem de `work` dalını gösterir. 
Tamam olduğundan emin olmak için; log kayıtlarını kontrol edip, `marks.bzr` ve `marks.git` dosyalarını temizleyin.

===== İzleme Alanını (Stage) Senkronize Etme

Ne kadar çok dalınız olursa olsun ve hangi içe aktarma yöntemini kullanırsanız kullanın, izleme alanınız `HEAD` ile senkronize değildir; ve birden fazla dalın içe aktarılmasıyla, çalışma diziniz de senkronize değildir.

Bu durumu aşağıdaki komutla kolayca çözebilirsiniz:

[source,console]
----
$ git reset --hard HEAD
----

===== .bzrignore ile Yoksayılmış Dosyaları Yoksaymak

Şimdi yoksayılacak dosyalara bir göz atalım.
İlk yapmanız gereken `.bzrignore` dosyasını `.gitignore` olarak yeniden adlandırmaktır.
`.bzrignore` dosyası "!!" veya "RE:" ile başlayan bir veya birkaç satır içeriyorsa, bunu değiştirmeniz ve belki de Bazaar'ın yoksaydığı tam olarak aynı dosyaları yoksaymak için birkaç `.gitignore` dosyası oluşturmanız gerekebilir.

Son olarak, bu değişikliği içeren taşınma (migration) için bir katkı oluşturmanız gerekecektir:

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Reponuzu Sunucuya Göndermek

İşte oldu!
Artık reponuzu yeni ana sunucusuna aktarabilirsiniz:

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Git reponuz kullanıma hazırdır.
