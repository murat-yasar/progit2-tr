[[_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
Takımınız kaynak kontrolünü TFVC'den Git'e dönüştürüyorsa, bunu en yüksek doğrulukta gerçekleştirmek isteyeceksiniz.
Ara işlev bölümünde hem git-tfs'i hem de git-tf'yi ele aldığımızı göz önünde bulundurursak, bu bölümde yalnızca git-tfs'i ele alacağımız anlamına gelir. Çünkü git-tfs dallarını destekler ve bunu git-tf ile yapmak oldukça zordur.

[NOTE]
====
Bu tek yönlü bir dönüşümdür.
Oluşan Git reposu, orijinal TFVC projesi ile bağlantı kuramaz.
====

İlk yapmanız gereken şey, kullanıcı adlarını eşlemektir.
TFVC değişiklik setleri için yazar alanına neyin gireceği konusunda oldukça serbesttir, ancak Git okunabilir bir ad ve e-posta adresi ister.
Bu bilgiyi `tf` komut satırı istemcisinden şöyle alabilirsiniz:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Bu projenin tarihindeki tüm değişiklik setlerini alır ve bunları işleyeceğimiz AUTHORS_TMP dosyasına koyar. 
'User' sütununun (ikinci sütun) verilerini çıkarmak için dosyayı açın ve sütunun hangi karakterlerde başladığını ve bittiğini bulun, ardından aşağıdaki komut satırındaki `cut` komutunun `11-20` parametrelerini bulunanlarla değiştirin:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

`cut` komutu her satırdan 11 ile 20 arasındaki karakterleri korur.
`tail` komutu başlık alanları ve ASCII alt çizgileri olan ilk iki satırı atlar.
Elde edilen sonuç, yinelenenleri ortadan kaldırmak için `sort` ve `uniq` e yönlendirilir ve `AUTHORS` adında bir dosyaya kaydedilir.
Sonraki adım el ile yapılmalıdır, git-tfs'nin bu dosyayı etkin bir şekilde kullanabilmesi için her satır bu formatta olmalıdır:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Sol taraftaki bölüm TFVC'den gelen "Kullanıcı" (user) alanıdır, eşittir işaretinin sağ tarafındaki bölüm ise Git işlemleri için kullanılacak olan kullanıcı adıdır.

Bu dosyayı aldıktan sonra, yapmanız gereken sıradaki şey ilgilendiğiniz TFVC projesinin bir kopyasını yapmaktır:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Aşağıdaki komut, katkı mesajlarının altındaki `git-tfs-id` bölümlerini temizleyecektir:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

Bu komut Git-bash ortamındaki `sed` komutunu kullanarak `git-tfs-id:` ile başlayan her satırı boş bir metinle değiştirir ve Git'in bu satırları görmezden gelmesini sağlar.

Hepsi tamamlandıktan sonra yeni bir uzak repo ekleyebilir, tüm dalları üstakıma itebilir ve ekibinizin Git üzerinden çalışmaya başlamasını sağlayabilirsiniz.
