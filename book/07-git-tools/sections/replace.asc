[[_replace]]
=== Nesneyi Değiştirme

Daha önce vurguladığımız gibi, Git'in veritabanındaki nesneleri değiştirilemezdir, ancak Git nesnelerini veritabanında başka nesnelerle _değiştiriyormuş_ gibi yapmak için ilginç bir yol sunar.

`replace` komutu, Git'te bir nesneyi belirtmenize ve "_bu_ nesne her çağrıldığında, o _sanki_ farklı bir nesneymiş gibi davran" demenize izin verir.
Bu, özellikle tüm geçmişi yeniden oluşturmak zorunda kalmadan, geçmişinizdeki bir katkıyı başka bir katkı ile değiştirmeniz gerektiğinde (ör. `git filter-branch`) çok kullanışlıdır.

Örneğin, büyük bir kod geçmişiniz var ve bu geçmişi yeni geliştiriciler için kısa bir geçmiş ve veri madenciliğiyle ilgilenen kişiler için çok daha uzun ve büyük bir geçmişe bölmek istiyorsunuz.
Yeni çizginizdeki en erken katkıyı, eski olanın en son katkısıyla "değiştirerek" bir geçmişi diğerine ekleyebilirsiniz.
Bu, genellikle onları birleştirmek için yapmanız gerektiği üzere (çünkü öncellik SHA-1'leri etkiler), yeni geçmişteki her katkıyı yeniden yazmanızı gerektirmeyeceği için güzel bir yöntemdir.

Hadi bunu deneyelim.
Mevcut bir repoyu alalım, onu biri kısa ve yeni, diğeri ise daha uzun, tarihi bir proje geçmişine sahip olan iki repoya bölelim. 
Ve sonra bu geçmişleri `replace` kullanarak, yeni repoların SHA-1 değerlerini değiştirmeden nasıl birleştirebileceğimize bakalım.


Basit bir repoyu beş basit kommit ile kullanacağız:

[source,console]
----
$ git log --oneline
ef989d8 fifth commit
c6e1e95 fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

Bu repoyu iki tarih çizgisine bölmek istiyoruz.
Bir çizgi,  birinci katkıdan dördünca katkıya kadar gider (bu tarihi geçmiş olacaktir).
İkinci çizgide sadece dört ve beş numaralı katkılar olacaktır (bu yakın geçmiş olacaktır).

image::images/replace1.png[]

Tarihi geçmişi oluşturmak kolaydır, geçmişe bir dal ekleyebilir ve sonra bu dalı yeni bir uzak repo'nun ana dalına (`master` dalına) itebiliriz.

[source,console]
----
$ git branch history c6e1e95
$ git log --oneline --decorate
ef989d8 (HEAD, master) fifth commit
c6e1e95 (history) fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

image::images/replace2.png[]

Şimdi, yeni `history` dalını yeni repomuzun `master` dalına itebiliriz:

[source,console]
----
$ git remote add project-history https://github.com/schacon/project-history
$ git push project-history history:master
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (12/12), 907 bytes, done.
Total 12 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (12/12), done.
To git@github.com:schacon/project-history.git
 * [new branch]      history -> master
----

Artık, geçmişimiz yayınlandı.
Şimdi geriye işin daha zor olan kısmı, yani yakın tarihli geçmişimizi küçültmek kaldı.
Bir yerde örtüşme olması gerekiyor ki birindeki bir katkıyı, diğerindeki eşdeğer bir katkı ile değiştirebilelim. Bu yüzden bu geçmişi sadece dört ve beş numaralı katkılara indirgiyoruz (bu durumda dört numaralı katkı örtüşür).

[source,console]
----
$ git log --oneline --decorate
ef989d8 (HEAD, master) fifth commit
c6e1e95 (history) fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

Bu durumda, tarihçenin nasıl genişletileceği hakkında talimatları olan bir temel kommit oluşturmak faydalıdır, böylece diğer geliştiriciler, kırpılmış tarihin ilk kommitine ulaşırlarsa ve daha fazlasına ihtiyaç duyarlarsa ne yapacaklarını bilirler.
Bu yüzden yapacağımız şey, talimatlarla bir başlangıç kommit nesnesi oluşturmak ve sonra geriye kalan kommitleri (dört ve beş) bunun üzerine yeniden düzenlemektir.

Bunu yapmak için, bölme noktası olarak seçmek üzere bir nokta seçmemiz gerekiyor, bizim için üçüncü kommit olacak, yani SHA dilinde `9c68fdc` dir.
Bu yüzden temel kommitimiz o ağaç üzerinde olacak.
Temel kommitimizi, yalnızca bir ağaç alır ve bize yepyeni, ebeveynsiz bir kommit nesnesi SHA-1 veren `commit-tree` komutunu kullanarak oluşturabiliriz.



It's useful in this case to create a base commit that has instructions on how to expand the history, so other developers know what to do if they hit the first commit in the truncated history and need more.
So, what we're going to do is create an initial commit object as our base point with instructions, then rebase the remaining commits (four and five) on top of it.

To do that, we need to choose a point to split at, which for us is the third commit, which is `9c68fdc` in SHA-speak.
So, our base commit will be based off of that tree.
We can create our base commit using the `commit-tree` command, which just takes a tree and will give us a brand new, parentless commit object SHA-1 back.

[source,console]
----
$ echo 'get history from blah blah blah' | git commit-tree 9c68fdc^{tree}
622e88e9cbfbacfb75b5279245b9fb38dfea10cf
----

[NOTE]
=====
The `commit-tree` command is one of a set of commands that are commonly referred to as 'plumbing' commands.
These are commands that are not generally meant to be used directly, but instead are used by *other* Git commands to do smaller jobs.
On occasions when we're doing weirder things like this, they allow us to do really low-level things but are not meant for daily use.
You can read more about plumbing commands in <<ch10-git-internals#_plumbing_porcelain>>
=====

image::images/replace3.png[]

OK, so now that we have a base commit, we can rebase the rest of our history on top of that with `git rebase --onto`.
The `--onto` argument will be the SHA-1 we just got back from `commit-tree` and the rebase point will be the third commit (the parent of the first commit we want to keep, `9c68fdc`):

[source,console]
----
$ git rebase --onto 622e88 9c68fdc
First, rewinding head to replay your work on top of it...
Applying: fourth commit
Applying: fifth commit
----

image::images/replace4.png[]

OK, so now we've re-written our recent history on top of a throw away base commit that now has instructions in it on how to reconstitute the entire history if we wanted to.
We can push that new history to a new project and now when people clone that repository, they will only see the most recent two commits and then a base commit with instructions.

Let's now switch roles to someone cloning the project for the first time who wants the entire history.
To get the history data after cloning this truncated repository, one would have to add a second remote for the historical repository and fetch:

[source,console]
----
$ git clone https://github.com/schacon/project
$ cd project

$ git log --oneline master
e146b5f fifth commit
81a708d fourth commit
622e88e get history from blah blah blah

$ git remote add project-history https://github.com/schacon/project-history
$ git fetch project-history
From https://github.com/schacon/project-history
 * [new branch]      master     -> project-history/master
----

Now the collaborator would have their recent commits in the `master` branch and the historical commits in the `project-history/master` branch.

[source,console]
----
$ git log --oneline master
e146b5f fifth commit
81a708d fourth commit
622e88e get history from blah blah blah

$ git log --oneline project-history/master
c6e1e95 fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

To combine them, you can simply call `git replace` with the commit you want to replace and then the commit you want to replace it with.
So we want to replace the "fourth" commit in the master branch with the "fourth" commit in the `project-history/master` branch:

[source,console]
----
$ git replace 81a708d c6e1e95
----

Now, if you look at the history of the `master` branch, it appears to look like this:

[source,console]
----
$ git log --oneline master
e146b5f fifth commit
81a708d fourth commit
9c68fdc third commit
945704c second commit
c1822cf first commit
----

Cool, right?  Without having to change all the SHA-1s upstream, we were able to replace one commit in our history with an entirely different commit and all the normal tools (`bisect`, `blame`, etc) will work how we would expect them to.

image::images/replace5.png[]

Interestingly, it still shows `81a708d` as the SHA-1, even though it's actually using the `c6e1e95` commit data that we replaced it with.
Even if you run a command like `cat-file`, it will show you the replaced data:

[source,console]
----
$ git cat-file -p 81a708d
tree 7bc544cf438903b65ca9104a1e30345eee6c083d
parent 9c68fdceee073230f19ebb8b5e7fc71b479c0252
author Scott Chacon <schacon@gmail.com> 1268712581 -0700
committer Scott Chacon <schacon@gmail.com> 1268712581 -0700

fourth commit
----

Remember that the actual parent of `81a708d` was our placeholder commit (`622e88e`), not `9c68fdce` as it states here.

Another interesting thing is that this data is kept in our references:

[source,console]
----
$ git for-each-ref
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/heads/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/remotes/history/master
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/HEAD
e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit	refs/remotes/origin/master
c6e1e95051d41771a649f3145423f8809d1a74d4 commit	refs/replace/81a708dd0e167a3f691541c7a6463343bc457040
----

This means that it's easy to share our replacement with others, because we can push this to our server and other people can easily download it.
This is not that helpful in the history grafting scenario we've gone over here (since everyone would be downloading both histories anyhow, so why separate them?) but it can be useful in other circumstances.
