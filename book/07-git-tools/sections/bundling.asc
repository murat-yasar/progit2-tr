[[_bundling]]
=== Paketleme (Bundling)

Git verisini ağ üzerinden aktarmanın yaygın yollarını (HTTP, SSH, vb.) öğrendik, ancak aslında pek kullanılmayan fakat oldukça yararlı olabilen başka bir yol daha vardır.

Git, verisini tek bir dosyaya "paketleyebilir" ve bu, çeşitli senaryolarda faydalı olabilir.
Belki ağınız kapalıdır ama değişikliklerinizi iş arkadaşlarınıza göndermek istiyorsunuz.
Belki dışarıda bir yerde çalışıyorsunuz ve güvenlik nedeniyle yerel ağa erişiminiz yoktur.
Belki sadece kablosuz/eternet kartınız bozulmuştur.
Belki şu anda paylaşılan bir sunucuya erişiminiz yok ve birine güncellemeleri e-posta ile göndermek istersiniz ama `format-patch` ile 40 değişikliği aktarmak istemiyorsunuzdur.

İşte burada `git bundle` komutunun yardımcı olabileceği yer vardır.
`bundle` komutu, bir `git push` komutuyla normalde ağ üzerinden gönderilecek her şeyi ikilik (binary) bir dosya paketi haline getirecektir.
Bu dosyayı birine e-posta ile gönderebilir veya bir taşınabilir sürücüye koyup, ardından başka bir repoda açabilirsiniz.

Basit bir örnek görelim.
İki katkı işlenmiş olan bir repoya sahip olduğunuzu varsayalım:

[source,console]
----
$ git log
commit 9a466c572fe88b195efd356c3f2bbeccdb504102
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:10 2010 -0800

    second commit

commit b1ec3248f39900d2a406049d762aa68e9641be25
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Mar 10 07:34:01 2010 -0800

    first commit
----

Eğer o repoyu birine göndermek istiyorsanız ama gönderilecek repoya erişiminiz yoksa veya hemen bir tane kurmak istemiyorsanız, `git bundle create` ile paketleyebilirsiniz.

[source,console]
----
$ git bundle create repo.bundle HEAD master
Counting objects: 6, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 441 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
----

Artık, repoyu yeniden oluşturmak için gereken tüm verilere sahip `repo.bundle` adında bir dosyanız var.
`bundle` komutu ile dahil edilmesini istediğiniz her referansı veya belirli bir değişiklik aralığını belirtmeniz gerekir.
Eğer bunu başka bir yere kopyalamak niyetindeyseniz, burada yaptığımız gibi HEAD'i de bir referans olarak eklemelisiniz.

Bu `repo.bundle` dosyasını başka birine e-posta ile gönderebilir veya USB sürücüsüne koyarak ulaştırabilirsiniz.

Bunun yanında, diyelim ki bu `repo.bundle` dosyası size gönderildi ve projede çalışmak istiyorsunuz.
Bu ikilik dosyayı, sanki URL'den klonlama yapar gibi, bir dizine kopyalayabilirsiniz.

[source,console]
----
$ git clone repo.bundle repo
Cloning into 'repo'...
...
$ cd repo
$ git log --oneline
9a466c5 second commit
b1ec324 first commit
----

Eğer referanslara HEAD'i dahil etmezseniz, -hangi dala geçileceğini bilemeyeceği için- `-b master` veya içerilen herhangi bir dalı belirtmeniz gerekir.

Şimdi diyelim ki üç adet değişiklik yaptınız ve bunları bir USB sürücüsü veya e-posta ile geri göndermek istiyorsunuz.

[source,console]
----
$ git log --oneline
71b84da last commit - second repo
c99cf5b fourth commit - second repo
7011d3d third commit - second repo
9a466c5 second commit
b1ec324 first commit
----

Öncelikle, pakete dahil etmek istediğimiz değişiklik aralığını belirlememiz gerekiyor.
Ağ üzerinde aktarılacak minimum veri kümesini otomatik olarak belirleyen ağ protokollerinin aksine, bunu manuel olarak kendimiz belirlememiz gerekecek.
Şimdi, doğrudan tüm repoyu paketlemek işe yarayacak olsa da lokal olarak yaptığımız üç değişikliği içeren farkı paketlemek daha iyidir.

Bunu yapabilmek için farkı hesaplamanız gerekecek.
<<ch07-git-tools#_commit_ranges>> bölümünde açıkladığımız gibi, bir dizi değişiklik aralığını belirtmek için birkaç yol vardır.
Başta kopyaladığımız dalda bulunmayıp, artık master dalımızda olan üç değişikliği almak için `origin/master..master` veya `master ^origin/master` gibi bir şey kullanabilirsiniz.
Bu işlemi `log` komutuyla test edebilirsiniz.

[source,console]
----
$ git log --oneline master ^origin/master
71b84da last commit - second repo
c99cf5b fourth commit - second repo
7011d3d third commit - second repo
----

Şimdi pakete dahil etmek istediğimiz değişikliklerin listesine sahip olduğumuza göre, onları paketleyelim.
Bunu, git bundle create` komutunu kullanarak yaparız; bunu yaparken paketimizin dosya adını ve eklemek istediğimiz katkıların aralığını veririz.

[source,console]
----
$ git bundle create commits.bundle master ^9a466c5
Counting objects: 11, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (9/9), 775 bytes, done.
Total 9 (delta 0), reused 0 (delta 0)
----

Now we have a `commits.bundle` file in our directory.
If we take that and send it to our partner, she can then import it into the original repository, even if more work has been done there in the meantime.

When she gets the bundle, she can inspect it to see what it contains before she imports it into her repository.
The first command is the `bundle verify` command that will make sure the file is actually a valid Git bundle and that you have all the necessary ancestors to reconstitute it properly.

[source,console]
----
$ git bundle verify ../commits.bundle
The bundle contains 1 ref
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
The bundle requires these 1 ref
9a466c572fe88b195efd356c3f2bbeccdb504102 second commit
../commits.bundle is okay
----

If the bundler had created a bundle of just the last two commits they had done, rather than all three, the original repository would not be able to import it, since it is missing requisite history.
The `verify` command would have looked like this instead:

[source,console]
----
$ git bundle verify ../commits-bad.bundle
error: Repository lacks these prerequisite commits:
error: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 third commit - second repo
----

However, our first bundle is valid, so we can fetch in commits from it.
If you want to see what branches are in the bundle that can be imported, there is also a command to just list the heads:

[source,console]
----
$ git bundle list-heads ../commits.bundle
71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master
----

The `verify` sub-command will tell you the heads as well.
The point is to see what can be pulled in, so you can use the `fetch` or `pull` commands to import commits from this bundle.
Here we'll fetch the 'master' branch of the bundle to a branch named 'other-master' in our repository:

[source,console]
----
$ git fetch ../commits.bundle master:other-master
From ../commits.bundle
 * [new branch]      master     -> other-master
----

Now we can see that we have the imported commits on the 'other-master' branch as well as any commits we've done in the meantime in our own 'master' branch.

[source,console]
----
$ git log --oneline --decorate --graph --all
* 8255d41 (HEAD, master) third commit - first repo
| * 71b84da (other-master) last commit - second repo
| * c99cf5b fourth commit - second repo
| * 7011d3d third commit - second repo
|/
* 9a466c5 second commit
* b1ec324 first commit
----

So, `git bundle` can be really useful for sharing or doing network-type operations when you don't have the proper network or shared repository to do so.
