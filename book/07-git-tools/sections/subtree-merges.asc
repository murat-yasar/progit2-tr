[[_subtree_merge]]
===== Alt Ağaç Birleştirme

Alt ağaç birleştirme fikri, iki projeniz olduğunda, bu projelerden birinin diğerinin alt dizinine eşlendiği anlamına gelir.
Bir alt ağaç birleştirmesi belirttiğinizde, Git genellikle birinin diğerinin bir alt ağacı olduğunu ve uygun şekilde birleştirmesi gerektiğini anlayacak kadar akıllıdır.

Bu bölümde, mevcut bir projeye ayrı bir proje eklemeyi ve ardından ikincisinin kodunu birincisinin bir alt dizinine birleştirmeyi inceleyeceğiz.

İlk olarak, Rack uygulamasını projemize ekleyeceğiz.
Rack projesini kendi projemize bir uzak referans olarak ekleyeceğiz ve sonra onun kendi dalına geçeceğiz:

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote --no-tags
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

Şimdi `master` dalında kendi projemize ve `rack_branch` dalında Rack projesinin köküne sahibiz.
Önce birini, sonra diğerini kontrol ederseniz, farklı proje köklerine sahip olduklarını görebilirsiniz:

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----

Bu konsept biraz garip gelebilir.
Bir repodaki tüm dalların aslında aynı projenin dalları olması gerekmez.
Nadiren faydalı olduğu için bu pek yaygın değildir, ancak dalların tamamen farklı tarihçeler içermesini sağlamak aslında kolaydır.

Burada, Rack projesini `master` projemize bir alt dizin olarak eklemek istiyoruz.
Bunu `git read-tree` komutuyla yapabiliriz.
`read-tree` ve arkadaşları hakkında daha fazla bilgiyi <<ch10-git-internals#ch10-git-internals>> bölümünde öğreneceksiniz; ancak şimdilik, bir dalın kök ağacını mevcut izlem alanınıza ve çalışma dizinize okuduğunu bilmeniz yeterlidir.
Şimdi `master` dalınıza geri döndük ve ana projemizin `master` dalına `rack_branch` dalını `rack` alt dizinine çekiyoruz:

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

Katkıyı işledikten sonra, tüm Rack dosyalarının o alt dizin altında olduğu görünür (sanki onları bir sıkıştırılmış dosyadan kopyalamışız gibi).
İlginç olan, bir dalın değişikliklerini bir diğerine oldukça kolay bir şekilde birleştirebilme yeteneğidir.
Yani, Rack projesi güncellendiğinde, o dala geçip değişiklikleri alabiliriz:

[source,console]
----
$ git checkout rack_branch
$ git pull
----

Ardından, bu değişiklikleri kendi `master` dalımıza birleştirebiliriz.
Değişiklikleri almak ve katkı mesajını önceden yenilemek için `--squash` seçeneğini, ayrıca özyinelemeli birleştirme stratejisinin `-Xsubtree` seçeneğini kullanın. (Özyinelemeli strateji burada varsayılan olduğundan, netleştirmek için dahil ediyoruz.)

[source,console]
----
$ git checkout master
$ git merge --squash -s recursive -Xsubtree=rack rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

Rack projesindeki tüm değişiklikler birleştirilmiş ve yerel olarak katkılanmaya hazır durumdadır.
Ayrıca, tam tersini de yapabilirsiniz - kendi `master` dalınızın `rack` alt dizininde değişiklikler yapın ve daha sonra bunları proje bakıcılarına veya üst akıma göndermek için sonradan `rack_branch` dalınıza birleştirin.

Bu bize, alt modüller kullanmadan alt modül iş akışı kullanmaya oldukça benzeyen bir yöntem sunar (ki alt modülleri <<ch07-git-tools#_git_submodules>> bölümünde ele alacağız).
İlgili diğer projelerin dallarını repomuzda tutabilir ve zaman zaman alt ağaç birleştirmesi yaparak bunları kendi projemize dahil edebiliriz.
Bu, mesela tüm kodların tek bir yerde katkılanmış olması gibi bazı açılardan güzel olabilir.
Ancak, diğer bazı dezavantajlara sahiptir! Örneğin, biraz daha karmaşıktır, değişiklikleri yeniden entegre etmek zordur veya yanlışlıkla bir dalı ilgisiz bir repoya itmek daha kolaydır.

Biraz garip olan başka bir şey de, (mesela onları birleştirmeniz gerekip gerekmediğini görmek için) `rack` alt dizininde neye sahip olduğunuz ile `rack_branch` dalındaki kod arasındaki farkı görmek istediğinizde normal `diff` komutunu kullanamıyor olmanızdır.
Bunun yerine, karşılaştırmak istediğiniz dal ile `git diff-tree` komutunu çalıştırmalısınız:

[source,console]
----
$ git diff-tree -p rack_branch
----

Or, to compare what is in your `rack` subdirectory with what the `master` branch on the server was the last time you fetched, you can run

[source,console]
----
$ git diff-tree -p rack_remote/master
----
