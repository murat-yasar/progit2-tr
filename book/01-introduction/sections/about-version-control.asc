=== Sürüm Denetimi

(((version control)))
'Sürüm Denetimi' nedir ve neden önemsenmelidir?
Sürüm denetimi, belirli sürümlerin daha sonra çağrılabilmesi için zaman içerisinde bir dosya veya dosya grubundaki değişiklikleri kaydeden bir sistemdir.
Örneğin bu kitapta, sürüm denetimi için yazılım kodları kullanılacaktır fakat sürüm denetimi bilgisayardaki herhangi bir dosya türü için de kullanılabilir.  

Eğer grafik ya da ağ tasarımcı iseniz ve çalıştığınız görüntü ya da tasarımlarda yaptığınız değişikliklerin her birini tutmak istiyorsanız (ki bu gerçekten istebilecek bir şeydir), Sürüm Denetim Sistemi (VCS: Version Control System) akıllıca bir seçim olacaktır.
Sürüm Denetim Sistemi, seçili dosyaların bir önceki sürüme döndürülmesi, projenin tamamının bir önceki sürüme döndürülmesi, zaman içerisinde yapılan değişikliklerin karşılaştırılması, probleme neden olabilecek değişikliklerin en son kim tarafından yapıldığı, kimin bir problemden ne zaman bahsettiği gibi bir çok işlemin gerçekleştirilebilmesini sağlar.
Genel olarak VCS kullanmak, değişiklik yaptığınız dosyalar üzerinde bir şeyleri berbat ettiğinizde ya da bir şeyleri kaybettiğinizde onları kolayca geri getirebilmeniz anlamına gelmektedir.
Ayrıca VCS'nin tüm bu özelliklerini çok az bir iş yüküyle elde edersiniz.

==== Yerel Sürüm Denetim Sistemleri

(((version control,local)))
Çoğu insanın sürüm denetim yöntemi, ilgili dosyaları başka bir yere kopyalamaktır (Muhtemelen daha zeki olanları, klasör isimlendirmesinde zaman damgası kullanıyordur).
Bu yaklaşım basit olduğundan çok yaygındır fakat aynı zamanda inanılmaz derecede hataya açık bir yaklaşımdır.
Hangi dizinde bulunduğunuzu unutmak, kazara yanlış dosya üzerine yazmak veya istemediğiniz dosyaların üzerine yazmak gibi ihtimallerin gerçekleşmesi olasıdır.

Tüm bu sorunlardan ötürü, uzun zaman önce geliştiriciler, yapılan tüm değişiklikleri gözden geçirilebilir parçalar halinde basit veritabanı üzerinde tutan yerel sürüm denetim sistemlerini geliştirdiler.

.Yerel sürüm denetimi.
image::images/local.png[Yerel sürüm denetim şeması]

En popüler VCS araçları RCS adında bir sistemdi, ki kendisi bugün bile hâlâ pek çok bilgisayarda kullanılır.
RCS yama setlerini (dosyalar arasındaki farklılıklar) disk üzerinde özel bir formatta tutarak çalışır; daha sonra tüm yamaları bir araya getirerek herhangi bir zamanda herhangi bir dosyanın nasıl göründüğüne bakıp, onu yeniden oluşturabilir.

==== Merkezi Sürüm Denetim Sistemleri

(((version control,centralized)))
İnsanların karşılaştığı bir diğer büyük problemse diğer sistemlerdeki geliştiricilerle iş birliği yapmak zorunda kalmalarıydı.
Bu problemin çözümü olarak Merkezi Sürüm Denetim Sistemleri (CVCS: Central VCS) geliştirildi.
Bu sistemler (CVS, Subversion ve Perforce gibi) bütün sürümlendirilmiş dosyaları barındıran tek bir sunucuya ve o sunucudaki dosyaları tek merkezden sürekli denetleyen istemcilere sahipti. (((CVS)))(((Subversion)))(((Perforce)))
Uzun yıllar boyunca bu sistem, sürüm denetim sistemleri için standart kabul edildi.

.Merkezi Sürüm Denetimi.
image::images/centralized.png[Merkezi sürüm denetim şeması]

Bu kurulum yerel VCS'lere kıyasla pek çok avantaj sunar.
Örneğin, projedeki herkes diğer herkesin projede ne yaptığını belli bir ölçüye kadar bilebilir.
Yöneticiler, kimin ne yapabileceği konusunda hassas bir kontrole sahiptir ve bir CVCS'yi yönetmek her istemcideki yerel veritabanlarıyla uğraşmaktan çok daha kolaydır.

Bununla birlikte bu kurulumun ciddi dezavantajları da vardır.
En bariz olanı, merkezi sunucuların tek bir noktaya bağlı olmasıdır.
Eğer o sunucu bir saatliğine çökerse, sunucunun çöktüğü andan itibaren hiç kimse bir başkasıyla iş birliği yapamaz veya üzerinde çalışmakta oldukları proje parçasına sürüm değişikliklerini kaydedemezler.
Eğer sunucu veritabanındaki harici disk bozulursa ve düzgün bir yedekleme yapılmamışsa, kullanıcıların kendi yerel makinelerinde tuttukları anlık durum dışında projenin geçmişisin ve tüm dosyalarını (yani her şeyi) kaybedersiniz.
Yerel VCS'ler de aynı sorundan muzdariptir, projenin geçmişini ve tüm dosyalarını tek bir yerde tuttuğunuz sürece, her şeyi kaybetme riskiniz her zaman varolacaktır.

==== Dağıtık Sürüm Denetim Sistemleri

(((version control,distributed)))
İşte tam da burada devreye Dağıtık Sürüm Denetim Sistemleri (DVCS: Distributed VCS) girer.
Bir DVCS'de (Git, Mercurial, Bazaar ya da Darcs gibi) istemciler sadece dosyaların son pozunu (snapshot) denetlemezler, daha çok repoyu reponun tam tarihiyle birlikte yansıtırlar.
Dolayısıyla, eğer herhangi bir sunucu devre dışı kalırsa, birbiriyle o sunucu aracılığıyla iş birliği yapan sistemlerdeki herhangi bir istemci reposu sunucuyu yenilemek için geri yüklenebilir.
Her klon (proje kopyası), en nihayetinde tüm verilerin tam bir yedeğidir aslında.

.Dağıtık sürüm denetimi.
image::images/distributed.png[Dağıtık sürüm denetim şeması]

Ayrıca bu sistemlerin çoğu birden çok uzak repoyla çalışmayı kolaylıkla kaldırabilir, o yüzden farklı gruplardan insanlarla farklı yollarla eş zamanlı bir şekilde rahatlıkla iş birliği yapabilirsiniz.
Bu da size, hiyerarşik model gibi merkezi sistemlerde yapması mümkün olmayan birden çok iş akışı şekli tanımlama ve kullanma olanağı sağlar.
