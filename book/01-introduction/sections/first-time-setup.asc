[[_first_time]]
=== Git'i İlk Defa Kurmak

Şimdi Git sisteminizde kurulu olduğuna göre, Git ortamınızı özelleştirmek için birkaç ayar yapmak isteyebilirsiniz.
Bu ayarları bir bilgisayarda yalnızca bir kere yapmanız yeterli, güncelleme yapsanız bile kaybolmayacaklardır.
Ayrıca istediğinizde gerekli komutları çalıştırarak onları değiştirebilirsiniz.

Git, `git config` adında, size Git'in tüm yönleriyle nasıl göründüğünü ve çalıştığını yöneten, yapılandırma değişkenlerini görme ve değiştirme kabiliyetini veren bir araca sahiptir.
Bu değişkenler üç farklı yerde saklanabilir:

1. `/etc/gitconfig` dosyası: Sistemdeki tüm kullanıcılara ve onların repolarına uygulanmış olan değerleri içerir.
   Eğer `git config` komutuna `--system` opsiyonunu eklerseniz, okuma ve yazma işlemlerini bu dosya üzerinden gerçekleştirir.
   (Çünkü bu bir sistem yapılandırma dosyasıdır, değişiklik yapmak için yönetici veya süper kullanıcı ayrıcalığına ihtiyacınız vardır.)
2. `~/.gitconfig` ya da `~/.config/git/config` dosyası: Size özel ve sizin kullanıcı hesabınıza ait olan değerler.
  `--global` seçeneğini yazarak Git'in okuma ve yazma işlemlerini özellikle bu dosya üzerinden yapmasını sağlayabilirsiniz, bu durum sisteminizde çalıştığınız _tüm_ repoları etkiler.
3. Hangi repoyu kullanıyorsanız o repodaki Git klasöründeki `config`dosyası (tam olarak `.git/config`): O repoya özgüdür.
   Git'i `--local` komutuyla bu dosya üzerinden okuma ve yazma işlemlerini yapmaya zorlayabilirsiniz, hatta bu seçim aslında varsayılan olarak gelir.
   (Doğal olarak, bu seçeneğin düzgün çalışması için, bir Git reposunun içinde bulunmanız gerekmektedir.)

Herhangi bir seviyedeki değerler, kendinden bir önceki seviyede olan değerleri geçersiz kılar. Dolayısıyla `.git/config` değerleri `/etc/gitconfig` değerlerini geçersiz kılar.

Windows sistemlerinde Git, `$HOME` klasöründeki `.gitconfig` dosyasını arar. (çoğu kişide `C:\Users\$USER` konumundadır)
MSys köküyle ilintili olmasına rağmen, Git'i bilgisayarınıza kurarken nereye kurulacağını seçtiğiniz `etc/gitconfig` dosyasını da arar.
Eğer Windows için Git'in 2.x veya daha iler bir sürümünü kullanıyorsanız, Windows XP'de `C:\Documents and Settings\All Users\Application Data\Git\config` sistem-seviyesinde bulunan bir yapılandırma dosyası vardır. Windows Vista ve daha yeni sürümlerdeki konumu ise: `C:\ProgramData\Git\config`.
Bu yapılandırma dosyası yalnızca bir yönetici olarak `git config -f <dosya>` kullanılarak değiştirilebilir.

Tüm ayarlarınızı ve onların nereden geldiğini görmek için şu komutu kullanabilirsiniz:

[source,console]
----
$ git config --list --show-origin
----

==== Kimliğiniz

Git'i ilk kurduğunuzda yapmanız gereken ilk şey, kullanıcı adınızı ve e-postanızı belirlemek olmalıdır.
Bunu yapmak önemlidir çünkü her Git katkısı (commit) bu bilgileri kullanır ve tüm işlediğiniz katkılara değişmez bir şekilde gömülmüştür.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

`--global` seçeneğini kullandığınızda bu işlemi yalnızca bir kere yaptığınızı tekrar etmekte fayda vardır, çünkü Git sisteminizde her zaman global olarak tanımladığınız bilgiyi kullanacaktır.
Eğer bu bilgileri bir projeye özel olarak geçersiz kılmak ve o projeye özgü bilgiler tanımlamak isterseniz, bu komutu projenin içindeyken ve `--global` seçeneği "olmadan" çalıştırın.

VCS araçlarının çoğu onları ilk çalıştırdığınızda bu bilgileri tanımlamanız için size yardımcı olacaktır.

[[_editor]]
==== Editörünüz

Kimliğinizi artık tanımladığımıza göre, mesaj yazmak için kullanacağınız varsayılan metin editörü ayarınızı yapılandırmanın zamanı geldi. Eğer bu ayarı yapmazsanız, Git, sisteminizin varsayılan editörünü kullanacaktır.

Eğer Emacs gibi farklı bir metin editörü kullanmak isterseniz, şunu yapabilirsiniz:

[source,console]
----
$ git config --global core.editor emacs
----

Windows sisteminde farklı bir metin editörü kullanmak isterseniz o editörün çalıştırılabilir dosyasının tam yolunu belirtmelisiniz.
Bu durum da editörünüzün nasıl paketlendiğine bağlı olarak değişiklik gösterebilir.

Popüler bir editör olan Notepad++'ı, 64-bit'lik sürümler tüm eklentileri desteklemediği için yüksek ihtimalle 32-bit'lik sürüm kullanacaksınız.
Eğer 32-bit'lik bir Windows sistemdeyseniz ya da 64-bit'lik sistemde 64-bit'lik editöre sahipseniz, şöyle bir komut girmelisiniz:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOT]
====
Vim, Emacs ve Notepad++, Windows, Linux ya da macOS gibi sistemlerde geliştiriciler tarafından sıkça kullanılan popüler editörlerdir.
Eğer başka bir editör ya da 32-bit'lik sürüm kullanıyorsanız, favori editörünüzü nasıl kuracağınız hakkında bilgi almak için şurayı okuyabilirsiniz: <<C-git-commands#_core_editor>>
====

[UYARI]
====
Eğer editörlerinizi bu şekilde kurmazsanız, Git çalıştırmak için uğraştığında kendinizi çok kafa karıştırıcı bir durumda bulabilirsiniz.
Windows sistemdineki bir örnek, Git tarafından başlatılan bir düzenleme sırasında erken sona eren bir Git işlemi içerebilir.
====

==== Ayarlarınızı Gözden Geçirmek
Eğer yapılandırma ayarlarınızı gözden geçirmek istiyorsanız, `git config --list` komutunu kullanarak Git'in o aşamada bulabildiği tüm ayarları listelemesini sağlayabilirsiniz.

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Anahtarlara birden çok kez rastlayabilirsiniz çünkü Git aynı anahtarı farklı dosyalardan okur (örneğin `/etc/gitconfig` ve `~/.gitconfig`).
Bu durumda, Git gördüğü her eşsiz anahtar için son değeri kullanır.

Ayrıca Git'in belli bir anahtarın değeri hakkında ne düşündüğünü görmenin yolu da şu şekildedir: `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOT]
====
Git birden fazla dosyadan aynı yapılandırma değişkeni değerlerini okuyabildiği için beklemediğiniz bir değerle karşılaşmanız ve nedenini anlayamamanız olasıdır.
Bunun gibi durumlarda Git'i o değerin _kökeniyle_ sorgu yapabilir ve hangi yapılandırma dosyasının o değeri belirlemede son sözü söylediğini öğrenebilirsiniz:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
