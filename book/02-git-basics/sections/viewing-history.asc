[[_viewing_history]]
=== Commit Geçmişini Görüntüleme

Birkaç "commit" oluşturduktan veya halihazırda "commit" geçmişine sahip bir repoyu klonladıktan sonra muhtemelen neler olup bittiğini görmek için kod geçmişine bakmak isteyeceksiniz.
Bunu yapmanın en temel ve güçlü aracı `git log` komutudur.

Bu örneklerde ``simplegit`` adı verilen çok basit bir proje kullanılmaktadır.
Projenin bir kopyasını elde etmek için aşağıdaki komutu çalıştırın:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Bu projede `git log` komutunu çalıştırdığınızda, şuna benzer bir çıktı almanız beklenir:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Hiçbir argüman almadan kullanılan `git log` komutu, varsayılan olarak bu repoda yapılan "commit"leri ters kronolojik sırayla listeler. Yani en son "commit" en üstte görünür.
Gördüğünüz gibi, bu komut her bir işlemi SHA-1 kimliği, geliştiricinin adı ve e-postası, "commit" tarihi ve mesajıyla birlikte listeler.

Tam olarak aradığınızı size göstermek için `git log` komutuna ilişkin çok sayıda ve çeşitli seçenekler mevcuttur.
Burada size en popüler olanlardan bazılarını göstereceğiz.

Kullanışlı seçeneklerden biri, her bir "commit"te ortaya çıkan farkı (the _patch_ output) gösteren `-p` veya `--patch`tir.
Ayrıca yalnızca en son 5 "commit"i görmek için '-5' kullanmak gibi. Görüntülenecek günlük "commit" sayısını da sınırlayabilirsiniz.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Bu seçenek aynı bilgileri ancak her bir "commit"le yapılan değişikliklerle birlikte görüntüler.
Bu yöntem, kod incelemesi veya bir ortak çalışanın eklediği bir dizi "commit" sırasında neler olduğuna hızlı bir şekilde göz atmak için oldukça faydalıdır.
Ayrıca `git log` ile bir dizi özetleme seçeneğini de kullanabilirsiniz.
Örneğin, her bir "commit" işlemine ilişkin bazı kısaltılmış istatistikleri görmek istiyorsanız `--stat` seçeneğini kullanabilirsiniz:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Gördüğünüz gibi, `--stat` seçeneği her bir "commit" girişinin altında değiştirilen dosyaların listesini, kaç dosyanın değiştirildiğini ve bu dosyalara kaç satırın eklendiğini ve kaldırıldığını yazdırır.
Ayrıca en sona bilgilerin bir özetini de koyar.

Bir diğer kullanışlı seçenek ise `--pretty`dir.
Bu seçenek, günlük çıktısını varsayılanın dışındaki formatlara çevirir.
Kullanmanız için önceden oluşturulmuş birkaç seçenek mevcuttur.
`oneline` seçeneği her bir "commit"i tek bir satıra yazdırır: Eğer çok sayıda "commit"e bakıyorsanız bu özellikle kullanışlıdır.
Ek olarak, `short`, `full`, ve `fuller` seçenekleri çıktıyı aşağı yukarı aynı şekilde ancak daha az veya daha fazla bilgiyle gösterir.
Sırasıyla

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

En ilginç seçenek, kendi günlük çıktı formatınızı belirlemenize olanak tanıyan `format`tır.
Bu, özellikle makine ayrıştırması için çıktı oluşturduğunuzda kullanışlıdır. Biçimi açıkça belirttiğiniz için Git'teki güncellemelerle değişmeyeceğini bilirsiniz.(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> `format`in gerektirdiği daha kullanışlı seçeneklerden bazılarını listeler.

[[pretty_format]]
.Useful options for `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Description of Output
| `%H`     | Commit hash
| `%h`     | Abbreviated commit hash
| `%T`     | Tree hash
| `%t`     | Abbreviated tree hash
| `%P`     | Parent hashes
| `%p`     | Abbreviated parent hashes
| `%an`    | Author name
| `%ae`    | Author email
| `%ad`    | Author date (format respects the --date=option)
| `%ar`    | Author date, relative
| `%cn`    | Committer name
| `%ce`    | Committer email
| `%cd`    | Committer date
| `%cr`    | Committer date, relative
| `%s`     | Subject
|================================

You may be wondering what the difference is between _author_ and _committer_.
The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.
So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit -- you as the author, and the core member as the committer.
We'll cover this distinction a bit more in <<ch05-distributed-git#ch05-distributed-git>>.

The `oneline` and `format` options are particularly useful with another `log` option called `--graph`.
This option adds a nice little ASCII graph showing your branch and merge history:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

This type of output will become more interesting as we go through branching and merging in the next chapter.

Those are only some simple output-formatting options to `git log` -- there are many more.
<<log_options>> lists the options we've covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the log command.

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
| `--oneline`       | Shorthand for `--pretty=oneline --abbrev-commit` used together.
|================================

==== Limiting Log Output

In addition to output-formatting options, `git log` takes a number of useful limiting options; that is, options that let you show only a subset of commits.
You've seen one such option already -- the `-2` option, which displays only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

This command works with lots of formats -- you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.

[NOTE]
====
You can specify more than one instance of both the `--author` and `--grep` search criteria, which
will limit the commit output to commits that match _any_ of the `--author` patterns and _any_
of the `--grep` patterns; however, adding the `--all-match` option further limits the output to
just those commits that match _all_ `--grep` patterns.
====

Another really helpful filter is the `-S` option (colloquially referred to as Git's ``pickaxe'' option), which takes a string and shows only those commits that changed the number of occurrences of that string.
For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -S function_name
----

The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.

In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-<n>`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.

[TIP]
.Preventing the display of merge commits
====
Depending on the workflow used in your repository, it's possible that a sizable percentage of the commits in your log history are just merge commits, which typically aren't very informative.
To prevent the display of merge commits cluttering up your log history, simply add the log option `--no-merges`.
====
