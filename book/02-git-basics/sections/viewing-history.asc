[[_viewing_history]]
=== Commit Geçmişini Görüntüleme

Birkaç "commit" oluşturduktan veya halihazırda "commit" geçmişine sahip bir repoyu klonladıktan sonra muhtemelen neler olup bittiğini görmek için kod geçmişine bakmak isteyeceksiniz.
Bunu yapmanın en temel ve güçlü aracı `git log` komutudur.

Bu örneklerde ``simplegit`` adı verilen çok basit bir proje kullanılmaktadır.
Projenin bir kopyasını elde etmek için aşağıdaki komutu çalıştırın:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Bu projede `git log` komutunu çalıştırdığınızda, şuna benzer bir çıktı almanız beklenir:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Hiçbir argüman almadan kullanılan `git log` komutu, varsayılan olarak bu repoda yapılan "commit"leri ters kronolojik sırayla listeler. Yani en son "commit" en üstte görünür.
Gördüğünüz gibi, bu komut her bir işlemi SHA-1 kimliği, geliştiricinin adı ve e-postası, "commit" tarihi ve mesajıyla birlikte listeler.

Tam olarak aradığınızı size göstermek için `git log` komutuna ilişkin çok sayıda ve çeşitli seçenekler mevcuttur.
Burada size en popüler olanlardan bazılarını göstereceğiz.

Kullanışlı seçeneklerden biri, her bir "commit"te ortaya çıkan farkı (the _patch_ output) gösteren `-p` veya `--patch`tir.
Ayrıca yalnızca en son 5 "commit"i görmek için '-5' kullanmak gibi. Görüntülenecek günlük "commit" sayısını da sınırlayabilirsiniz.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Bu seçenek aynı bilgileri ancak her bir "commit"le yapılan değişikliklerle birlikte görüntüler.
Bu yöntem, kod incelemesi veya bir ortak çalışanın eklediği bir dizi "commit" sırasında neler olduğuna hızlı bir şekilde göz atmak için oldukça faydalıdır.
Ayrıca `git log` ile bir dizi özetleme seçeneğini de kullanabilirsiniz.
Örneğin, her bir "commit" işlemine ilişkin bazı kısaltılmış istatistikleri görmek istiyorsanız `--stat` seçeneğini kullanabilirsiniz:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Gördüğünüz gibi, `--stat` seçeneği her bir "commit" girişinin altında değiştirilen dosyaların listesini, kaç dosyanın değiştirildiğini ve bu dosyalara kaç satırın eklendiğini ve kaldırıldığını yazdırır.
Ayrıca en sona bilgilerin bir özetini de koyar.

Bir diğer kullanışlı seçenek ise `--pretty`dir.
Bu seçenek, günlük çıktısını varsayılanın dışındaki formatlara çevirir.
Kullanmanız için önceden oluşturulmuş birkaç seçenek mevcuttur.
`oneline` seçeneği her bir "commit"i tek bir satıra yazdırır: Eğer çok sayıda "commit"e bakıyorsanız bu özellikle kullanışlıdır.
Ek olarak, `short`, `full`, ve `fuller` seçenekleri çıktıyı aşağı yukarı aynı şekilde ancak daha az veya daha fazla bilgiyle gösterir.
Sırasıyla

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

En ilginç seçenek, kendi günlük çıktı formatınızı belirlemenize olanak tanıyan `format`tır.
Bu, özellikle makine ayrıştırması için çıktı oluşturduğunuzda kullanışlıdır. Biçimi açıkça belirttiğiniz için Git'teki güncellemelerle değişmeyeceğini bilirsiniz.(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> `format`in gerektirdiği daha kullanışlı seçeneklerden bazılarını listeler.

[[pretty_format]]
.Useful options for `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Seçenek  | Çıktı Tanımı
| `%H`     | Commit hash kimliği
| `%h`     | Commit hash kimliği (kısa)
| `%T`     | Çalışma ağacı hash kimliği
| `%t`     | Çalışma ağacı hash kimliği (kısa)
| `%P`     | Ana hashler
| `%p`     | Ana hashler (kısa)
| `%an`    | Yazar adı
| `%ae`    | Yazar email adresi
| `%ad`    | Yazım tarihi (--date=option)
| `%ar`    | Yazım tarihi, göreli
| `%cn`    | Geliştirici adı
| `%ce`    | Geliştirici email adresi
| `%cd`    | Geliştirme tarihi
| `%cr`    | Geliştirme tarihi, göreli
| `%s`     | Konu
|================================

_yazar_ ve _geliştirici_ arasındaki farkın ne olduğunu merak ediyor olabilirsiniz.
Yazar, kodu ilk yazan kişi, geliştirici ise kodu son değiştiren yani "commit" eden kişidir.
Yani, bir projeye bir yama gönderirseniz ve çekirdek üyelerden biri yamayı uygularsa, her ikiniz de kredi alırsınız - yazar olarak siz ve "commit" eden olarak çekirdek üye.
Bu ayrımı <<ch05-distributed-git#ch05-distributed-git>> bölümünde biraz daha ele alacağız.

`oneline` ve `format` seçenekleri `--graph` adı verilen başka bir `log` seçeneğiyle birlikte kullanıldığında özellikle kullanışlıdır.
Bu seçenek çıktıya, dallanma ve birleştirme geçmişinizi gösteren küçük bir ASCII grafiği ekler:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Bir sonraki bölümde dallanma ve birleştirme işlemlerine geçtikçe bu tür çıktılar daha ilginç hale gelecektir.

Bunlar `git log` için yalnızca bazı basit çıktı biçimlendirme seçenekleridir fakat çok daha fazlası vardır.
<<log_options>> şu ana kadar ele aldığımız seçeneklerin yanı sıra faydalı olabilecek diğer bazı yaygın biçimlendirme seçeneklerini ve bunların log komutunun çıktısını nasıl değiştirdiklerini listeler.

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Seçenek           | Tanım
| `-p`              | Her bir "commit"te tanıtılan yamayı göster
| `--stat`          | Her "commit"te değiştirilen dosyalara ilişkin istatistikleri göster
| `--shortstat`     | --stat komutundan yalnızca değiştirilen/eklenenler/silenler satırını göster
| `--name-only`     | "commit" bilgisinden sonra değiştirilen dosyaların listesini göster
| `--name-status`   | Eklenen/değiştirilen/silinmiş bilgilerle birlikte değiştirilen dosyaların listesini de göster
| `--abbrev-commit` | SHA-1 kimliğinin tüm 40 karakteri yerine sadece ilk bir kaç karakterini göster
| `--relative-date` | Tarihi, tam tarih biçimini kullanmak yerine göreli bir biçimde göster (ör. ``2 hafta önce``)
| `--graph`         | Günlük çıktısının yanında dal ve birleştirme geçmişinin ASCII grafiğini de göster
| `--pretty`        | "commit"leri alternatif bir formatta göster. Seçenekler arasında tek satırlı (oneline), kısa (short), tam (full), daha kapsamlı (fuller) ve kendi oluşturduğunuz format da yer alır.
| `--oneline`       | `--pretty=oneline --abbrev-commit` birlikte kullanımı için kısayoldur
|================================

==== Günlük (Log) Çıktısını Sınırlama

`git log` çıktı biçimlendirme seçeneklerine ek olarak, bir dizi yararlı sınırlama seçeneğini de beraberinde getirir. Bu "commit"lerin yalnızca belli bir alt kümesini göstermenize izin veren seçeneklerdir.
Böyle bir seçeneği zaten gördünüz: yalnızca son iki işlemi görüntüleyen '-2' seçeneği.
Aslında, `-<n>` işlemini yapabilirsiniz. Buradaki `-n`, en son yapılan `n` sayıdaki "commit"i gösteren herhangi bir tam sayıdır.
Gerçekte, bunu sık kullanmanız pek mümkün değildir; çünkü Git varsayılan olarak tüm çıktıları bir "pager" (sayfa düzenleyici) üzerinden yönlendirir, böylece bir kerede yalnızca bir sayfalık günlük çıktısı görürsünüz.

Yine de, `--since` ve `--until` gibi zaman sınırlayıcı seçenekler çok kullanışlıdır.
Örneğin, aşağıdaki komut son iki hafta içinde yapılan "commit"lerin listesini yazdırır:

[source,console]
----
$ git log --since=2.weeks
----

Bu komut birçok formatla çalışır; "2008-01-15" gibi belirli bir tarih veya "2 yıl 1 gün 3 dakika önce" gibi göreceli bir tarih belirtebilirsiniz.

Listeyi, bazı arama kriterleriyle eşleşen "commit"lere göre de filtreleyebilirsiniz.
`--author` seçeneği belirli bir yazara göre filtreleme yapmanızı sağlar ve `--grep` seçeneği "commit" mesajlarındaki anahtar kelimeleri aramanızı sağlar.

[NOTE]
====
Hem `--author` hem de `--grep` arama kriterlerinin birden fazla örneğini de aynı anda kullanabilirsiniz. 
Bu "commit" çıktısını sadece uygun düşen `--author` ve `--grep` kalıplarıyla eşleşen "commit"lerle sınırlayacaktır.
Ancak, `--all-match` seçeneğinin eklenmesi çıktıyı _all_ `--grep` kalıplarıyla eşleşen "commit"ler yüzünden daha da sınırlandıracaktır.

====

Bir diğer gerçekten faydalı filtre ise bir dize (string: karakter dizisi) alan ve yalnızca o dizenin oluşum sayısını değiştiren "commit"leri gösteren `-S` seçeneğidir (yazılımcılar arasında Git'in "kazma" seçeneği olarak anılır).
Örneğin, belirli bir işleve referans ekleyen veya kaldıran son "commit" işlemi bulmak istiyorsanız şunu arayabilirsiniz:

[source,console]
----
$ git log -S function_name
----

`git log`a filtre argümanı olarak yazabileceğimiz son faydalı seçenek ise dosya yoludur (path).
Eğer bir dizin veya dosya adı belirtirseniz günlük çıktısını (log), bu dosyalarda değişiklik yapan "commit"lerle sınırlayabilirsiniz.
Bu her zaman son seçenektir ve dosya yollarını seçeneklerden (bayraklardan) ayırmak için genellikle önünde çift çizgi (`--`) bulunur.

<<limit_options>> bölümünde bunları ve diğer birkaç genel seçeneği referans olması açısından listeleyeceğiz.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Seçenek               | Tanım
| `-<n>`                | Sadece en son n sayıdaki "commit"i göster
| `--since`, `--after`  | "commit" listesini belirli bir tarihten sonra yapılan "commitler"le sınırla
| `--until`, `--before` | "commit" listesini belirli bir tarihe kadar yapılan "commitler"le sınırla
| `--author`            | Sadece author kısmı verilen dizeyle eşleşen "commit"leri göster
| `--committer`         | Sadece committer kısmı verilen dizeyle eşleşen "commit"leri göster
| `--grep`              | Sadece "commit" mesajında verilen dize bulunan "commit"leri göster
| `-S`                  | Sadece codunda verilen dizeyi ekleyen veya çıkaran "commit"leri göster
|================================

Örneğin, Git kaynak kodu geçmişindeki test dosyalarını değiştiren hangi "commit"lerin Ekim 2008 ayında Junio Hamano tarafından işlendiğini ve birleştirme (merge) "commit"leri olmadığını görmek istiyorsanız, şöyle bir komut çalıştırabilirsiniz:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Bu komutla, Git kaynak kodu geçmişindeki yaklaşık 40.000 "commit"ten bu kriterlere uyan sadece 6'sını görebilirsiniz.

[TIP]
.Preventing the display of merge commits
====
Reponuzda kullanılan iş akışına bağlı olarak, günlük (log) geçmişinizdeki "commit"lerin büyük bir yüzdesinin yalnızca birleştirme (merge) "commit"leri olması mümkündür ve bunlar genellikle pek bilgilendirici değildir.
Birleştirme işlemlerinin görüntülenmesinin günlük (log) geçmişinizi karmaşık hale getirmesini önlemek için, `--no-merges` seçeneğini eklemeniz yeterlidir.
====
