[[_git_branches_overview]]
=== Kısaca Dallar

Git'in dallanma yöntemini gerçekten anlamak için bir adım geriye çekilip Git'in verileri nasıl sakladığını incelememiz gerekiyor.

<<ch01-introduction#ch01-introduction>> bölümündün hatırlayabileceğiniz gibi Git, verileri bir dizi değişiklik veya farklılık olarak değil, bir dizi _anlık görüntü_ olarak saklar.

Git, bir katkı işlediğinizde (commit), aşamalandırdığınız (stage) içeriğin anlık görüntüsünün işaretçisi (pointer: bir katkı veya ağacın yerini gösteren işaretçi) içeren bir katkı nesnesi (object) saklar.
Bu nesne aynı zamanda yazarın adını ve e-posta adresini, katkı mesajını ve önceki katkı veya katkılara ilişkin işaretçileri içerir. İlk katkı (first commit) için sıfır; normal bir katkı için bir; ve birden fazla dalın birleşmesinden kaynaklanan bir katkı içinse çoklu öncel katkı bulunur.

Bunu görselleştirmek için, üç dosya içeren bir dizine sahip olduğumuzu ve bunların hepsini aşamalandırıp (stage) katkı olarak işlediğinizi varsayalım.
Dosyaları aşamalandırmak, her bir dosya için bir sağlama toplamı (checksum) hesaplar (<<ch01-introduction#ch01-introduction>> bölümünde bahsettiğimiz SHA-1 karması), dosyanın bu sürümünü Git reposunda saklar (Git bunlara _blobs_ olarak atıfta bulunur)(Binary Large OBject: ikili geniş nesne), ve bu sağlama toplamını aşamalandırma alanına (stage) ekler:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

`git commit` komutunu çalıştırarak bir katkı  oluşturduğunuzda, Git her alt dizinin (bu durumda sadece kök (root) proje dizini) doğrular (checksum) ve bunları Git reposunda bir ağaç nesnesi (tree object) olarak saklar.
Git daha sonra meta verileri ve kök proje ağacının işaretçisini içeren bir katkı nesnesi oluşturur. Böylece gerektiğinde anlık görüntüyü yeniden oluşturabilir.(((git commands, commit)))

Git reponuz artık beş nesne içeriyor: 
  - Her biri üç dosyadan birinin içeriğini temsil eden üç _blob_
  - Dizinin içeriğini ve hangi dosya adlarının hangi _blob_ olarak depolandığını listeleyen bir _ağaç_
  - Kök ağacın işaretçisini ve tüm katkı metadata'sını içeren bir _katkı_

.Bir katkı ve onun ağacı
image::images/commit-and-tree.png[Bir katkı ve onun ağacı.]

Eğer bazı değişiklikler yaparsanız ve tekrar katkı olarak işlerseniz (git commit), sonraki katkı, kendinden hemen önceki katkıya işaret eden bir işaretçiyi depolar.

.Katkı ve önceki katkılar
image::images/commits-and-parents.png[Katkı ve önceki katkılar.]

Git'teki bir dal, temel olarak üzerindeki katkılardan birinin hafif ve taşınabilir bir işaretçisidir.
Git'te varsayılan dalın adı `master`dır (anadal).
Katkıları işlemeye başladığınızda, en son işlediğiniz katkıyı gösteren bir `master` dalı alırsınız.
Her katkı işlediğinizde, `master` dalı işaretçisi otomatik olarak ileri hareket eder.

[NOT]
====
Git'teki ``master`` dalı özel bir dal değildir.(((master)))
Tam olarak diğer diğer dallar gibi davranır.
Hemen hemen her repoda bulunmasının tek nedeni, `git init` komutunun varsayılan olarak onu oluşturması ve çoğu insanın bunu değiştirmeye uğraşmamasıdır.
====

.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]

[[_create_new_branch]]
==== Creating a New Branch

(((branches, creating)))
What happens when you create a new branch?
Well, doing so creates a new pointer for you to move around.
Let's say you want to create a new branch called `testing`.
You do this with the `git branch` command:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

This creates a new pointer to the same commit you're currently on.

.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]

How does Git know what branch you're currently on?
It keeps a special pointer called `HEAD`.
Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
In Git, this is a pointer to the local branch you're currently on.
In this case, you're still on `master`.
The `git branch` command only _created_ a new branch -- it didn't switch to that branch.

.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]

You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing.
This option is called `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

You can see the ``master'' and ``testing'' branches that are right there next to the `f30ab` commit.

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
Let's switch to the new `testing` branch:

[source,console]
----
$ git checkout testing
----

This moves `HEAD` to point to the `testing` branch.

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]

What is the significance of that?
Well, let's do another commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]

This is interesting, because now your `testing` branch has moved forward, but your `master` branch still points to the commit you were on when you ran `git checkout` to switch branches.
Let's switch back to the `master` branch:

[source,console]
----
$ git checkout master
----

.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]

That command did two things.
It moved the HEAD pointer back to point to the `master` branch, and it reverted the files in your working directory back to the snapshot that `master` points to.
This also means the changes you make from this point forward will diverge from an older version of the project.
It essentially rewinds the work you've done in your `testing` branch so you can go in a different direction.

[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====

Let's make a few changes and commit again:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Now your project history has diverged (see <<divergent_history>>).
You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
And you did all that with simple `branch`, `checkout`, and `commit` commands.

[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]

You can also see this easily with the `git log` command.
If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).

This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.

Let's see why you should do so.

[NOTE]
.Creating a new branch and switching to it at the same time
====
It's typical to create a new branch and want to switch to that new branch at the same time -- this can be done in one operation with `git checkout -b <newbranchname>`.
====
