[[ch10-git-internals]]
== Dahili Git Ögeleri

Bu bölüme çok daha öndeki bir bölümden atlamış olabilir veya kitabın geri kalanını sırayla okuyarak bu noktaya gelmiş olabilirsiniz. Her iki durumda da, bu bölümde Git'in iç işleyişini ve uygulanmasını ele alacağız. 
Şunu keşfettik ki bu bilginin anlaşılması, Git'in ne kadar kullanışlı ve güçlü olduğunu kavramak için temel önem taşımaktadır, ancak diğerleri bize bu bilgilerin yeni başlayanlar için kafa karıştırıcı ve gereksiz ölçüde karmaşık olabileceğini savundular. Bu nedenle, bu tartışmayı kitaptaki son bölüm yaptık. 
Böylece bu bilgiyi öğrenme sürecinizin erken veya geç aşamalarında okuyabilirsiniz. 
Ne zaman okuyacağınıza dair kararı siz vereceksiniz.

Şimdi burada olduğunuza göre, başlayabiliriz. 
İlk olarak, henüz net değilse, Git temel olarak bir içerik adreslenebilir dosya sistemidir ve üzerine yazılmış bir VCS kullanıcı arayüzüne sahiptir. 
Bunun ne anlama geldiğini birazdan daha detaylıca öğreneceksiniz.

Git'in ilk zamanlarında (çoğunlukla v1.5 öncesi), kullanıcı arayüzü bu dosya sistemini vurguladığından; cilalanmış bir VCS yerine, daha karmaşık bir yapıdaydı. 
Kullanıcı arayüzü diğer sistemler kadar temiz ve kullanımı kolay hale gelene kadar, Son birkaç yılda, arayüz sürekli olarak geliştirildi. 
Ancak, kompleks ve öğrenmesi zor olan erken dönem Git kullanıcı arayüzüne dair bir sterotip hala varlığını sürdürmektedir.

İçerik adreslenebilir dosya sistem katmanı inanılmaz derecede harika olduğu için, bu bölümde önce bunu ele alacağız; daha sonra, zamanla karşılaşabileceğiniz taşıma mekanizmalarını ve repo bakım görevlerini öğreneceksiniz.

include::book/10-git-internals/sections/plumbing-porcelain.asc[]

include::book/10-git-internals/sections/objects.asc[]

include::book/10-git-internals/sections/refs.asc[]

include::book/10-git-internals/sections/packfiles.asc[]

include::book/10-git-internals/sections/refspec.asc[]

include::book/10-git-internals/sections/transfer-protocols.asc[]

include::book/10-git-internals/sections/maintenance.asc[]

include::book/10-git-internals/sections/environment.asc[]

=== Özet

Bu noktada Git'in arka planda ne yaptığını ve bir dereceye kadar nasıl uygulandığını oldukça iyi anlamalısınız. 
Bu bölümde, kitabın geri kalanında öğrendiğiniz porselen komutlarından daha düşük seviyeli ve daha basit olan bir takım tesisat komutları — komutları ele alınmıştır. 
Git'in daha düşük düzeyde nasıl çalıştığını anlamak, yaptığı şeyi neden yaptığını anlamanızı ve ayrıca özel iş akışınızın sizin için çalışmasını sağlamak için kendi araçlarınızı ve yardımcı komut dosyalarınızı yazmanızı kolaylaştıracaktır.

İçerik adreslenebilir bir dosya sistemi olarak Git, bir VCS'den daha fazlası olarak kolayca kullanabileceğiniz çok güçlü bir araçtır. 
Bu teknolojiye ilişkin kendi harika uygulamanızı uygulamak için Git'in iç yapısıyla ilgili yeni keşfettiğiniz bilgileri kullanabileceğinizi ve Git'i daha gelişmiş şekillerde kullanırken daha rahat hissedebileceğinizi umuyoruz.

